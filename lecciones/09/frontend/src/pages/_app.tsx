import "@/styles/globals.css";
import {
  Address,
  Blockfrost,
  Lucid,
  MintingPolicy,
  PolicyId,
  ScriptHash,
  SpendingValidator,
  TxHash,
  UTxO,
  Unit,
} from "lucid-cardano";
import type { AppProps } from "next/app";
import {
  Dispatch,
  SetStateAction,
  createContext,
  useEffect,
  useState,
} from "react";

const collateralScript: SpendingValidator = {
  type: "PlutusV2",
  //script: "59042801000032323232323232323232322323223232322533300b32533300c3004300e37546002601e6ea80084c8c94ccc038c018c040dd50038a9998070008a51153300f49011f636865636b5f737461626c65636f696e5f616d6f756e74203f2046616c73650014a0264a66601ea66601e004294454cc0412411f636865636b5f737461626c65636f696e5f616d6f756e74203f2046616c73650014a02a66601e002294454cc041240121636865636b5f7369676e65645f62795f636f6c5f6f776e6572203f2046616c73650014a02940cc88c8cc00400400c894ccc058004528099299980999b8f375c603200400829444cc00c00c004c064004dd6180a180a980a980a980a980a980a980a980a98089baa3002301137540086eb8c00cc044dd500519b873370290001bad301330143014301037540126464a66601e600e60226ea8004520001375a602a60246ea8004c94ccc03cc01cc044dd50008a60103d87a8000132330010013756602c60266ea8008894ccc054004530103d87a8000132323253330143371e911045553444100375c602c006266e95200033019375000297ae0133005005002375a602c0046032004602e002646600200264660020026eacc058c05cc05cc05cc05cc04cdd5180218099baa00622533301500114bd6f7b630099191919299980a99b8f48900002100313301a337606ea4008dd3000998030030019bab3017003375c602a0046032004602e00244a666028002298103d87a8000132323253330133371e00c6eb8c05400c4cdd2a4000660306e980052f5c026600a00a0046eacc054008c060008c058004dd7180098081baa0092301300114a04602460260022930a998062491856616c696461746f722072657475726e65642066616c7365001365632533300a3370e90000008a99980718069baa003149854cc02c0205854ccc028c00800454ccc038c034dd50018a4c2a660160102c2a660160102c60166ea8008dc3a4004a66666601e00220022a6601000a2c2a6601000a2c2a6601000a2c2a6601000a2ca66600a66e1d200030073754002264a6660140022a6600e00a2c26464a6660180022a6601200e2c26464a66601c0022a660160122c264a66601e60240042930a998060050b1929999998098008a998060050b0a998060050b0a998060050b09bad001153300c00a1630100013010002325333333011001153300a00816153300a00816153300a00816153300a008161375c002601c002601c00464a66666601e0022a6601000c2c2a6601000c2c2a6601000c2c2a6601000c2c26eb8004c030004c020dd50008a998030020b299999980600088008a998028018b0a998028018b0a998028018b0a998028018b2491c72656465656d65723a20436f6c6c61746572616c52656465656d657200490116646174756d3a20436f6c6c61746572616c446174756d005734ae7155ceaab9e5573eae815d0aba257481"
  script: "59046301000032323232323232323232322323223232322533300b32533300c3004300e37546002601e6ea80084c8c94ccc038c018c040dd50038a9998070008a51153300f49011f636865636b5f737461626c65636f696e5f616d6f756e74203f2046616c73650014a0264a66601ea66601e004294454cc0412411f636865636b5f737461626c65636f696e5f616d6f756e74203f2046616c73650014a02a66601e002294454cc041240121636865636b5f7369676e65645f62795f636f6c5f6f776e6572203f2046616c73650014a02940cc88c8cc00400400c894ccc058004528099299980999b8f375c603200400829444cc00c00c004c064004dd6180a180a980a980a980a980a980a980a980a98089baa3002301137540086eb8c00cc044dd500519b873370290001bad3013301430143010375401264a66601c600c60206ea8004520001375a602860226ea8004c94ccc038c018c040dd50008a60103d87a8000132330010013756602a60246ea8008894ccc050004530103d87a8000132323232533301433722911045553444100002153330143371e910104555344410000213374a90001980c9ba80014bd700a6103d87a8000133006006003375a602c0066eb8c050008c060008c058004c8c8cc004004c8cc004004dd5980b180b980b980b980b98099baa30043013375400c44a66602a002297adef6c60132323232533301533722910100002153330153371e9101000021003100513301a337606ea4008dd3000998030030019bab3017003375c602a0046032004602e00244a666028002298103d87a800013232323253330143372200e0042a66602866e3c01c0084cdd2a4000660326e980052f5c02980103d87a80001330060060033756602c0066eb8c050008c060008c058004dd7180098081baa0092301300114a04602460260022930a9980624811856616c696461746f722072657475726e65642066616c7365001365632533300a3370e90000008a99980718069baa003149854cc02c0205854ccc028c00800454ccc038c034dd50018a4c2a660160102c2a660160102c60166ea8008dc3a4004a66666601e00220022a6601000a2c2a6601000a2c2a6601000a2c2a6601000a2ca66600a66e1d200030073754002264a6660140022a6600e00a2c26464a6660180022a6601200e2c26464a66601c0022a660160122c264a66601e60240042930a998060050b1929999998098008a998060050b0a998060050b0a998060050b09bad001153300c00a1630100013010002325333333011001153300a00816153300a00816153300a00816153300a008161375c002601c002601c00464a66666601e0022a6601000c2c2a6601000c2c2a6601000c2c2a6601000c2c26eb8004c030004c020dd50008a998030020b299999980600088008a998028018b0a998028018b0a998028018b0a998028018b2491c72656465656d65723a20436f6c6c61746572616c52656465656d657200490116646174756d3a20436f6c6c61746572616c446174756d005734ae7155ceaab9e5573eae815d0aba257481"
};

export type AppState = {
  // Global
  lucid?: Lucid;
  wAddr?: Address;
  // NFT Policy
  nftPolicyIdHex?: PolicyId;
  nftTokenNameHex?: string;
  nftAssetClassHex?: Unit;
  nftPolicy?: MintingPolicy;
  // Stablecoin Policy
  scPolicyIdHex?: PolicyId;
  scTokenNameHex?: string;
  scAssetClassHex?: Unit;
  scPolicy?: MintingPolicy;
  minPercent?: number;
  mintingPolRefScrUTxO?: UTxO;
  mintingPolRefScrUTxORef?: string;
  // Oracle
  oracleScript?: SpendingValidator;
  oracleScriptHash?: ScriptHash;
  oracleAddress?: Address;
  oracleWithNftUTxO?: UTxO;
  oracleUtxoWithNFTRef?: string;
  // Collateral
  collateralScript: SpendingValidator;
  collateralScriptHash?: ScriptHash;
  collatealAddr?: Address;
  collateralRefScrUTxO?: UTxO;
  collateralRefScrUTxORef?: string;
  collateralToUnlockUTxO?: UTxO;
  collateralToUnlockUTxORef?: string;
  // Reference Scripts
  txScriptsDeployment?: TxHash;
};

const initialAppState: AppState = {
  collateralScript: collateralScript,
};

export const AppStateContext = createContext<{
  appState: AppState;
  setAppState: Dispatch<SetStateAction<AppState>>;
}>({ appState: initialAppState, setAppState: () => { } });

export default function App({ Component, pageProps }: AppProps) {
  const [appState, setAppState] = useState<AppState>(initialAppState);

  const connectLucidAndNami = async () => {
    try {

      const lucid = await Lucid.new(
        new Blockfrost(
          "https://cardano-preprod.blockfrost.io/api/v0",
          "preprodTs9TeCpur1MF6NlYABy4B592ds93fG18"
        ),
        "Preprod"
      );
      if (!window.cardano.nami) {
        window.alert("Please install Nami Wallet");
        return;
      }
      const nami = await window.cardano.nami.enable();
      lucid.selectWallet(nami);
      setAppState({
        ...initialAppState,
        lucid: lucid,
        wAddr: await lucid.wallet.address(),
      });
    } catch (error) {
      window.alert("Error connecting Lucid and Nami. Make sure to put your Blockfrost API key in `src/pages/_app.tsx`. (Don't do it in production, only locally!)");
    }
  };

  useEffect(() => {
    if (appState.lucid) return;
    connectLucidAndNami();
  }, [appState]);
  return (
    <AppStateContext.Provider value={{ appState, setAppState }}>
      <Component {...pageProps} />
    </AppStateContext.Provider>
  );
}
